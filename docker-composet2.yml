# https://www.smarthomebeginner.com/traefik-2-docker-tutorial/#Traefik_2_Setup
# https://www.smarthomebeginner.com/google-oauth-with-traefik-2-docker/
########################### PRE

version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SERVICES
secrets:
  httpassword:
    file: $SECRETS_DIR/httpassword
  cloudflare_email:
    file: $SECRETS_DIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETS_DIR/cloudflare_api_key
  cloudflare_api_token:
    file: $SECRETS_DIR/cloudflare_api_token

########################### SERVICES
services:

########################### FRONTENDS
socket-proxy:
  container_name: socket-proxy
  image: tecnativa/docker-socket-proxy
  restart: always
  networks:
    socket_proxy:
      ipv4_address: 192.168.91.254 # You can specify a static IP
  privileged: true
  #ports:
  # - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
  # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
  # - "2375:2375"
  volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
  environment:
    - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
    ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
    # 0 to revoke access.
    # 1 to grant access.
    ## Granted by Default
    - EVENTS=1
    - PING=1
    - VERSION=1
    ## Revoked by Default
    # Security critical
    - AUTH=0
    - SECRETS=0
    - POST=1 # Ouroboros
    # Not always needed
    - BUILD=0
    - COMMIT=0
    - CONFIGS=0
    - CONTAINERS=1 # Traefik, portainer, etc.
    - DISTRIBUTION=0
    - EXEC=0
    - IMAGES=1 # Portainer
    - INFO=1 # Portainer
    - NETWORKS=1 # Portainer
    - NODES=0
    - PLUGINS=0
    - SERVICES=1 # Portainer
    - SESSION=0
    - SWARM=0
    - SYSTEM=0
    - TASKS=1 # Portaienr
    - VOLUMES=1 # Portainer

## Traefik v2 - Reverse Proxy
# Touch traefik.log and acme/acme.json
# Set acme.json perms to 600
traefik:
  image: traefik:livarot # v2.2
  container_name: traefik
  restart: always
  depends_on:
    - "socket-proxy"
  command: # CLI arguments
    - --global.checkNewVersion=true
    - --global.sendAnonymousUsage=true
    - --entryPoints.http.address=:80
    - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
    - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
    - --entryPoints.traefik.address=:8080
    # - --entryPoints.ping.address=:8081
    - --api=true
    - --api.dashboard=true
    # - --api.insecure=true
    # - --serversTransport.insecureSkipVerify=true
    # - --ping=true
    # - --pilot.token=$TRAEFIK_PILOT_TOKEN
    - --log=true
    - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
    - --accessLog=true
    - --accessLog.filePath=/traefik.log
    - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
    - --accessLog.filters.statusCodes=400-499
    - --providers.docker=true
    # - --providers.docker.endpoint=unix:///var/run/docker.sock
    # Use Docker Socket Proxy for improved security
    - --providers.docker.endpoint=tcp://socket-proxy:2375
    # Automatically set Host Rule for services
    # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAINNAME}`)
    - --providers.docker.exposedByDefault=false
    # - --entrypoints.https.http.middlewares=chain-oauth@file
    - --entrypoints.https.http.tls.options=tls-opts@file
    # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
    - --entrypoints.https.http.tls.certresolver=dns-cloudflare
    - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
    - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
    - --providers.docker.network=t2_proxy
    - --providers.docker.swarmMode=false
    - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
    - --providers.file.watch=true # Only works on top level files in the rules folder
    # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
    - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
    - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
    - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
  networks:
    t2_proxy:
      ipv4_address: 192.168.90.254
    socket_proxy:
  security_opt:
    - no-new-privileges:true
  #healthcheck:
  #  test: ["CMD", "traefik", "healthcheck", "--ping"]
  #  interval: 5s
  #  retries: 3
  ports:
    - target: 80
      published: 80
      protocol: tcp
      mode: host
    - target: 443
      published: 443
      protocol: tcp
      mode: host
    # - target: 8080
    #   published: 8080
    #   protocol: tcp
    #   mode: host
  volumes:
    - $DOCKER_DIR/appdata/traefik2/rules:/rules 
    # - /var/run/docker.sock:/var/run/docker.sock:ro
    - $DOCKER_DIR/appdata/traefik2/acme/acme.json:/acme.json 
    - $DOCKER_DIR/appdata/traefik2/traefik.log:/traefik.log
  environment:
    - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
    - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    - HTPASSWD_FILE=/run/secrets/httpassword
  secrets:
    - cloudflare_email
    - cloudflare_api_key
    - httpassword
  labels:
    #- "autoheal=true"
    - "traefik.enable=true"
    # HTTP-to-HTTPS Redirect
    - "traefik.http.routers.http-catchall.entrypoints=http"
    - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
    - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
    - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    # HTTP Routers
    - "traefik.http.routers.traefik-rtr.entrypoints=https"
    - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
    ## Services - API
    - "traefik.http.routers.traefik-rtr.service=api@internal"
    ## Healthcheck/ping
    #- "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
    #- "traefik.http.routers.ping.tls=true"
    #- "traefik.http.routers.ping.service=ping@internal"
    ## Middlewares
    - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

# Google OAuth 2.0 - Forward Authentication
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: always
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the apps later.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL,ozpyes@gmail.com
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.oauth-rtr.entrypoints: https
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.${DOMAINNAME}`)
      traefik.http.routers.oauth-rtr.tls: true
      ## HTTP Services
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181
      ## Middlewares
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file

# Portainer - Container Management WebUI
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: -H tcp://socket-proxy:2375
    networks:
      - t2_proxy
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.portainer-rtr.entrypoints: https
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.$DOMAINNAME`)
      # traefik.http.routers.portainer-rtr.tls: true
      ## Middlewares
      traefik.http.routers.portainer-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: 9000

############################# DATABASE

# MariaDB - MySQL Database
# After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    container_name:  mariadb
    image: linuxserver/mariadb:latest
    restart: always
    security_opt:
      - no-new-privileges:true
    ports:
      - $MARIADB_PORT:3306
    volumes:
      - $DOCKER_DIR/appdata/mariadb/data:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD

# phpMyAdmin - Database management
# Create a new user with admin privileges. Cannot login as root.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    hostname: phpmyadmin
    restart: unless-stopped
    networks:
      - t2_proxy
      - default
    ports:
      - ${PHPMYADMIN_PORT}:${PHPMYADMIN_PORT}
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: ${DB_PORT}
      PMA_ARBITRARY: 1 
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.php-rtr.entrypoints: https
      traefik.http.routers.php-rtr.rule: Host(`pma.${DOMAINNAME}`)
      traefik.http.routers.php-rtr.tls: true
      ## Middlewares
      traefik.http.routers.php-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.php-rtr.service: php-svc
      traefik.http.services.php-svc.loadbalancer.server.port: 80

############################# DOWNLOADERS
# nzbget - Binary newsgrabber (NZB downloader)
nzbget:
  image: ghcr.io/linuxserver/nzbget
  container_name: nzbget
  restart: always
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  volumes:
    - $DOCKER_DIR/appdata/nzbget:/config
    - $DOWNLOAD_DIR:/data/downloads
  environment:
    PUID: $PUID
    PGID: $PGID
    TZ: $TZ
  labels:
    - "traefik.enable=true"
    ## HTTP Routers Auth
    - "traefik.http.routers.nzbget-rtr.entrypoints=https"
    - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME`)"
    ## Middlewares
    - "traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file"
    ## HTTP Services
    - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
    - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

# Jackett - Torrent Indexer
transmission:
  image: ghcr.io/linuxserver/transmission
  container_name: transmission
  restart: unless-stopped
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  volumes:
    - $DOCKER_DIR/appdata/transmission:/config
    - $DOWNLOAD_DIR:/downloads
  environment:
    PUID: $PUID
    PGID: $PGID
    TZ: $TZ
    USER: $TRANSMISSION_USER
    PASS: $TRANSMISSION_PASS
    TRANSMISSION_WEB_HOME: /combustion-release/
  ports:
    - 9091:9091
    - 51413:51413
    - 51413:51413/udp
  labels:
    traefik.enable: true
    ## HTTP Routers
    traefik.http.routers.transmission-rtr.entrypoints: https
    traefik.http.routers.transmission-rtr.rule: Host(`transmission.${DOMAINNAME}`)
    ## Middlewares
    traefik.http.routers.transmission-rtr.middlewares: middlewares-rate-limit@file
    ## HTTP Services
    traefik.http.routers.transmission-rtr.service: transmission-svc
    traefik.http.services.transmission-svc.loadbalancer.server.port: 9091

############################# INDEXERS

# Jackett - Torrent Indexer
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/jackett:/config
      - $DOWNLOAD_DIR:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.jacket-rtr.entrypoints: https
      traefik.http.routers.jacket-rtr.rule: Host(`jackett.${DOMAINNAME}`)
      ## Middlewares
      traefik.http.routers.jacket-rtr.middlewares: chain-oauth@file
      ## HTTP Services
      traefik.http.routers.jacket-rtr.service: jacket-svc
      traefik.http.services.jacket-svc.loadbalancer.server.port: 9117
  
  # NZBHydra2 - NZB meta search
  hydra:
    image: linuxserver/nzbhydra2:latest
    container_name: hydra
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$NZBHYDRA_PORT:5076"
    volumes:
      - $DOCKER_DIR/appdata/hydra2:/config
      - $DOWNLOAD_DIR:/data/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.hydra-rtr.entrypoints=https"
      - "traefik.http.routers.hydra-rtr.rule=Host(`hydra.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.hydra-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.hydra-rtr.service=hydra-svc"
      - "traefik.http.services.hydra-svc.loadbalancer.server.port=5076"


############################# PVRS

# Radarr - Movie management
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/radarr:/config
      - $DOWNLOAD_DIR:/data/downloads
      - $MOVIES_DIR:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"


# Sonarr - TV Shows management
# https://trash-guides.info/Sonarr/Sonarr-Release-Profile-RegEx/
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/sonarr:/config
      - $DOWNLOAD_DIR:/data/downloads
      - $TV_DIR:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  # Bazarr - Subtitle Management
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: "unless-stopped"
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/bazarr:/config
      - $MEDIA_DIR:/data/media
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr-bypass.rule=Host(`bazarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$BAZARR_API_KEY`) || Query(`apikey`, `$BAZARR_API_KEY`))"
      - "traefik.http.routers.bazarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.routers.bazarr-rtr-bypass.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

############################# MEDIA

  # Plex - Media Server
  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    restart: "unless-stopped"
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp" # conflicts with xTeVe
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      #- "$PLEX_WEB_TOOLS_PORT:33400"
    volumes:
      - $DOCKER_DIR/appdata/plexms:/config
      - $DOWNLOAD_DIR/:/data/downloads
      - $MEDIA_DIR:/data/media
      # - /dev/shm:/data/transcode # Offload transcoding to RAM if you have enough RAM
      # Optional. See why the folders below are mounted as volumes https://github.com/htpcBeginner/docker-traefik/discussions/147
    environment:
      TZ: $TZ
      HOSTNAME: "ubuntuserver"
      PLEX_CLAIM: $PLEX_CLAIM
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      #VIRTUAL_HOST: proxplex.$DOMAINNAME
      #VIRTUAL_PORT: 443
      #VIRTUAL_NETWORK: t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"


# Ombi - Media Requests
  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    restart: unless-stopped
    networks:
      - t2_proxy
    volumes:
      - $DOCKER_DIR/appdata/ombi:/config
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.ombi-rtr.entrypoints: https
      traefik.http.routers.ombi-rtr.rule: Host(`ombi.${DOMAINNAME}`)
      ## Middlewares
      traefik.http.routers.ombi-rtr.middlewares: chain-no-auth@file
      ## HTTP Services
      traefik.http.routers.ombi-rtr.service: ombi-svc
      traefik.http.services.ombi-svc.loadbalancer.server.port: 3579

# Tautulli - Previously PlexPy. Plex statistics and monitoring
  tautulli:
    image: linuxserver/tautulli:latest
    container_name: tautulli
    restart: unless-stopped
    networks:
      - t2_proxy
    volumes:
      - $DOCKER_DIR/appdata/tautulli/config:/config
      - $DOCKER_DIR/appdata/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.tautulli-rtr.entrypoints: https
      traefik.http.routers.tautulli-rtr.rule: Host(`tautulli.${DOMAINNAME}`)
      ## Middlewares
      traefik.http.routers.tautulli-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.tautulli-rtr.service: tautulli-svc
      traefik.http.services.tautulli-svc.loadbalancer.server.port: 8181

############################# MEDIA FILE MANAGEMENT


############################# UTILITIES

# Guacamole
## Get Guac Script
# docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --mysql > guac_initdb.sql
## Copy to Maridb folder script above
## Login to MySQL 
# mysql -u root -p
## Create needed for Guacamole
# create database guacamole;
# CREATE USER 'guacdb_user' IDENTIFIED BY '<PASSWORD>';
# GRANT ALL ON 'guacamole%'.* TO 'guacdb_user';
# flush privilleges;
# quit
# cat /config/guac_initdb.sql | mysql -u guacdb_user -p guacamole;
## login with root and check there are 23 tables
# mysql -u root -p
# use guacamole;
# show tables;
## Setup GuacD first
  # Guacamole Daemon - Needed for Guacamole
  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true

 guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    networks:
      - t2_proxy
      - default
    security_opt:
      - no-new-privileges:true
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: mariadb
      MYSQL_PORT: $MARIADB_PORT
      MYSQL_DATABASE: $GUACDB
      MYSQL_USER: $GUACDB_USER
      MYSQL_PASSWORD: $GUACDB_PASS
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole"
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      ## HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

  codeserver:
    image: codercom/code-server:latest
    container_name: codeserver
    restart: always
    networks:
      - t2_proxy
    volumes:
      - $USER_DIR/codeserver_data:/home/coder/data
      - $DOCKER_DIR/appdata/codeserver:/home/coder
    environment:
      PASSWORD: $CODESERVER_PASS
      # Run as root first (0), create the directories, then change permissions to user:docker and 775. Disable run as root below.
      user: $PUID:$PGID
      # user: "0"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vscode-rtr.entrypoints=https"
      - "traefik.http.routers.vscode-rtr.rule=Host(`code.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.vscode-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.vscode-rtr.service=vscode-svc"
      - "traefik.http.services.vscode-svc.loadbalancer.server.port=8080"

############################# TESTING 

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 3000:3000
    volumes:
      - ${USERDIR}/docker/grafana/data:/var/lib/grafana
      - ${USERDIR}/docker/grafana/config:/etc/grafana
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.grafana-rtr.entrypoints: https
      traefik.http.routers.grafana-rtr.rule: Host(`grafana.${DOMAINNAME}`)
      traefik.http.routers.grafana-rtr.tls: true
      ## Middlewares
      traefik.http.routers.grafana-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.grafana-rtr.service: grafana-svc
      traefik.http.services.grafana-svc.loadbalancer.server.port: 3000

############################# MAINTENANC
  uptime:
    image: louislam/uptime-kuma:latest
    container_name: uptime
    restart: unless-stopped
    networks:
      - t2_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/appdata/uptime:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.uptime-rtr.entrypoints=https"
      - "traefik.http.routers.uptime-rtr.rule=Host(`uptime.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.uptime-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.uptime-rtr.service=uptime-svc"
      - "traefik.http.services.uptime-svc.loadbalancer.server.port=3001"


 # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - t2_proxy
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
      - socket-proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKER_DIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

# Add, Oznu/Cloudflare-DDNS
# Add, tiredofit/traefik-cloudflare-companion
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME


  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
     - socket-proxy
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      #- CF_EMAIL=$CLOUDFLARE_EMAIL
      - CF_TOKEN=$CLOUDFLARE_API_TOKEN
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
      - DOCKER_HOST=tcp://socket-proxy:2375
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=Host(`mox.$DOMAINNAME`) || Host(`pwt.$DOMAINNAME`) || Host(`webmin.$DOMAINNAME`) || Host(`shell.$DOMAINNAME`)"