# https://www.smarthomebeginner.com/traefik-2-docker-tutorial/#Traefik_2_Setup
########################### PRE
# sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# sudo apt-get update
# sudo apt-get install docker-ce
# sudo curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose
# sudo usermod -aG docker ${USER}
# mkdir ~/docker
# sudo nano ~/docker/.env
# sudo chmod -R 775 ~/docker
# mkdir ~/docker/shared
# mkdir -p ~/docker/traefik2/acme
# touch ~/docker/traefik2/acme/acme.json
# chmod 600 ~/docker/traefik2/acme/acme.json
# touch ~/docker/traefik2/traefik.log
# nano ~/docker/traefik/traefik.toml
# nano ~/docker/docker-compose.yml
# docker network create t2_proxy
# FORWARD PORTS 8 and 443 to S erver
# docker-compose -f ~/docker/docker-compose.yml up -d


version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
  default:
    driver: bridge

########################### SERVICES
secrets:
  authelia_jwt_secret:
    file: ${SECRETS_DIR}/authelia_jwt_secret
  authelia_session_secret:
    file: ${SECRETS_DIR}/authelia_session_secret
  authelia_notifier_smtp_password:
    file: ${SECRETS_DIR}/authelia_notifier_smtp_password

########################### SERVICES
services:

########################### FRONTENDS

## Traefik v2 - Reverse Proxy
  traefik:
    image: traefik:chevrotin # v2.2
    container_name: traefik
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.wireguard.address=:51820/udp
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAINNAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      t2_proxy:
        ipv4_address: 172.22.0.50
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 51820
        published: 51820
        protocol: udp
        mode: host
    volumes:
      - $USERDIR/docker/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/traefik2/acme/acme.json:/acme.json 
      - $USERDIR/docker/traefik2/traefik.log:/traefik.log 
      - $USERDIR/docker/shared:/shared
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAINNAME}"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" 

# Google OAuth 2.0 - Forward Authentication
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    environment:
      - CLIENT_ID=${GOOGLE_CLIENT_ID}
      - CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - COOKIE_DOMAIN=${DOMAINNAME}
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.${DOMAINNAME}
      - URL_PATH=/_oauth
      - WHITELIST=${MY_EMAIL},ozpyes@gmail.com
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.oauth-rtr.entrypoints: https
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.${DOMAINNAME}`)
      traefik.http.routers.oauth-rtr.tls: true
      ## HTTP Services
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181
      ## Middlewares
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file

# Authelia (Lite) - Self-Hosted
  authelia: 
    container_name: authelia
    image: authelia/authelia:4.21.0
    restart: always
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/docker/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_notifier_smtp_password
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.authelia-rtr.entrypoints: https
      traefik.http.routers.authelia-rtr.rule: Host(`authelia.${DOMAINNAME}`)
      traefik.http.routers.authelia-rtr.tls: true
      ## Middlewares
      traefik.http.routers.authelia-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.authelia-rtr.service: authelia-svc
      traefik.http.services.authelia-svc.loadbalancer.server.port: 9091

# Portainer - Container Management WebUI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${PORTAINER_PORT}:${PORTAINER_PORT}
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $USERDIR/docker/portainer/data:/data
    environment:
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.portainer-rtr.entrypoints: https
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.${DOMAINNAME}`)
      traefik.http.routers.portainer-rtr.tls: true
      ## Middlewares
      traefik.http.routers.portainer-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: ${PORTAINER_PORT}

# Organizr - Unified Frontend
  organizr:
    image: organizrtools/organizr-v2:latest
    container_name: organizr
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - $USERDIR/docker/organizr:/config
    ports:
      - ${ORGANIZR_PORT}:80
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.organizr-rtr.entrypoints: https
      traefik.http.routers.organizr-rtr.rule: Host(`www.${DOMAINNAME}`)
      traefik.http.routers.organizr-rtr.tls: true
      ## Middlewares
      traefik.http.routers.organizr-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.organizr-rtr.service: organizr-svc
      traefik.http.services.organizr-svc.loadbalancer.server.port: 80

## Autoindex - Simple Directory Index
  autoindex:
    image: dceoy/nginx-autoindex
    container_name: autoindex
    hostname: autoindex
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${INDEX_PORT}:80
    volumes:
      - ${INDEX_DIR}:/var/lib/nginx/html:ro # Location you want to index
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.index-rtr.entrypoints: https
      traefik.http.routers.index-rtr.rule: Host(`index.${DOMAINNAME}`)
      traefik.http.routers.index-rtr.tls: true
      ## Middlewares
      traefik.http.routers.index-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.index-rtr.service: index-svc
      traefik.http.services.index-svc.loadbalancer.server.port: 80

############################# DATABASE

# MariaDB - MySQL Database
  mariadb:
    container_name:  mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - ${USERDIR}/docker/mariadb/data:/config
      - ${USERDIR}/docker/shared:/shared
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

# phpMyAdmin - Database management
# Create a new user with admin privileges. Cannot login as root.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    hostname: phpmyadmin
    restart: unless-stopped
    networks:
      - t2_proxy
      - default
    ports:
      - ${PHPMYADMIN_PORT}:${PHPMYADMIN_PORT}
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: ${DB_PORT}
      PMA_ARBITRARY: 1 
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.php-rtr.entrypoints: https
      traefik.http.routers.php-rtr.rule: Host(`pma.${DOMAINNAME}`)
      traefik.http.routers.php-rtr.tls: true
      ## Middlewares
      traefik.http.routers.php-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.php-rtr.service: php-svc
      traefik.http.services.php-svc.loadbalancer.server.port: 80

############################# DOWNLOADERS

# Deluge Torrent Downloader
  deluge:
    image: linuxserver/deluge
    container_name: deluge
    networks:
      - t2_proxy
    ports:
      - ${DELUGE_PORT}:${DELUGE_PORT}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=002
    volumes:
      - ${USERDIR}/docker/deluge:/config
      - ${DOWNLOAD_DIR}:/downloads
    restart: unless-stopped
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.deluge-rtr.entrypoints: https
      traefik.http.routers.deluge-rtr.rule: Host(`deluge.${DOMAINNAME}`)
      traefik.http.routers.deluge-rtr.tls: true
      ## Middlewares
      traefik.http.routers.deluge-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.deluge-rtr.service: deluge-svc
      traefik.http.services.deluge-svc.loadbalancer.server.port: ${DELUGE_PORT}

############################# INDEXERS

# Jackett - Torrent Indexer
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    restart: always
    networks:
      - t2_proxy
    dns: 1.1.1.1
    ports:
      - ${JACKETT_PORT}:${JACKETT_PORT}
    volumes:
      - ${USERDIR}/docker/jackett:/config
      - ${DOWNLOAD_DIR}:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.jacket-rtr.entrypoints: https
      traefik.http.routers.jacket-rtr.rule: Host(`jackett.${DOMAINNAME}`)
      traefik.http.routers.jacket-rtr.tls: true
      ## Middlewares
      traefik.http.routers.jacket-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.jacket-rtr.service: jacket-svc
      traefik.http.services.jacket-svc.loadbalancer.server.port: ${JACKETT_PORT}

############################# PVRS

# Lidarr - Music Management
  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - ${LIDARR_PORT}:${LIDARR_PORT}
    volumes:
      - ${USERDIR}/docker/lidarr:/config
      - ${DOWNLOAD_DIR}:/downloads
      - ${MUSIC_DIR}:/music
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.lidarr-rtr.entrypoints: https
      traefik.http.routers.lidarr-rtr.rule: Host(`lidarr.${DOMAINNAME}`)
      traefik.http.routers.lidarr-rtr.tls: true
      ## Middlewares
      traefik.http.routers.lidarr-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.lidarr-rtr.service: lidarr-svc
      traefik.http.services.lidarr-svc.loadbalancer.server.port: ${LIDARR_PORT}

# Radarr - Movie management
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - ${RADARR_PORT}:${RADARR_PORT}
    volumes:
      - ${USERDIR}/docker/radarr:/config
      - ${DOWNLOAD_DIR}:/downloads
      - ${MOVIES_DIR}:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.radarr-rtr.entrypoints: https
      traefik.http.routers.radarr-rtr.rule: Host(`radarr.${DOMAINNAME}`)
      traefik.http.routers.radarr-rtr.tls: true
      ## Middlewares
      traefik.http.routers.radarr-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.radarr-rtr.service: radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port: ${RADARR_PORT}

# Sonarr - TV Shows management
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - ${SONARR_PORT}:${SONARR_PORT}
    volumes:
      - ${USERDIR}/docker/sonarr:/config
      - ${DOWNLOAD_DIR}:/downloads
      - ${TV_DIR}:/TV
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.sonarr-rtr.entrypoints: https
      traefik.http.routers.sonarr-rtr.rule: Host(`sonarr.${DOMAINNAME}`)
      traefik.http.routers.sonarr-rtr.tls: true
      ## Middlewares
      traefik.http.routers.sonarr-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.sonarr-rtr.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: ${SONARR_PORT}

############################# MEDIA

# Ombi - Media Requests
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    hostname: ombi
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - ${OMBI_PORT}:${OMBI_PORT}
    volumes:
      - ${USERDIR}/docker/ombi:/config
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.ombi-rtr.entrypoints: https
      traefik.http.routers.ombi-rtr.rule: Host(`ombi.${DOMAINNAME}`)
      traefik.http.routers.ombi-rtr.tls: true
      ## Middlewares
      traefik.http.routers.ombi-rtr.middlewares: chain-no-auth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.ombi-rtr.service: ombi-svc
      traefik.http.services.ombi-svc.loadbalancer.server.port: ${OMBI_PORT}

# Tautulli - Previously PlexPy. Plex statistics and monitoring
  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - "${TAUTULLI_PORT}:${TAUTULLI_PORT}"
    volumes:
      - ${USERDIR}/docker/tautulli/config:/config
      - ${USERDIR}/docker/tautulli/logs:/logs:ro
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.tautulli-rtr.entrypoints: https
      traefik.http.routers.tautulli-rtr.rule: Host(`tautulli.${DOMAINNAME}`)
      traefik.http.routers.tautulli-rtr.tls: true
      ## Middlewares
      traefik.http.routers.tautulli-rtr.middlewares: chain-no-auth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.tautulli-rtr.service: tautulli-svc
      traefik.http.services.tautulli-svc.loadbalancer.server.port: ${TAUTULLI_PORT}

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    hostname: jellyfin
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges
    ports:
      - "${JELLYFIN_PORT}:8096"
      - "8920:8920"
    volumes:
      - ${USERDIR}/docker/jellyfin:/config
      # - ${MEDIA_DIR}:/nas
      - ${MEDIA_DIR}:/nas:ro
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      UMASK_SET: 022
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.jellyfin-rtr.entrypoints: https
      traefik.http.routers.jellyfin-rtr.rule: Host(`jf.${DOMAINNAME}`)
      traefik.http.routers.jellyfin-rtr.tls: true
      ## Middlewares
      traefik.http.routers.jellyfin-rtr.middlewares: chain-no-auth@file
      ## HTTP Services
      traefik.http.routers.jellyfin-rtr.service: jellyfin-svc
      traefik.http.services.jellyfin-svc.loadbalancer.server.port: 8096

############################# MEDIA FILE MANAGEMENT

# MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
  mkvtoolnix:
    image: jlesage/mkvtoolnix
    container_name: mkvtoolnix
    hostname: mkvtoolnix
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - ${MKVTOOLNIX_PORT}:${MKVTOOLNIX_PORT}
    volumes:
      - ${DOWNLOAD_DIR}:/downloads:rw
      - ${MEDIA_DIR}:/media:rw
      - ${USERDIR}/docker/mkvtoolnix/config:/config:rw
    environment:
      USER_ID: ${PUID}
      GROUP_ID: ${PGID}
      UMASK: 002
      TZ: ${TZ}
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: ${MKVTOOLNIX_VNC_PASSWD}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.mkv-rtr.entrypoints: https
      traefik.http.routers.mkv-rtr.rule: Host(`mkv.${DOMAINNAME}`)
      traefik.http.routers.mkv-rtr.tls: true
      ## Middlewares
      traefik.http.routers.mkv-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.mkv-rtr.service: mkv-svc
      traefik.http.services.mkv-svc.loadbalancer.server.port: ${MKVTOOLNIX_PORT}

############################# UTILITIES

  # firefox:
  #   image: jlesage/firefox:latest
  #   container_name: firefox
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #     - default
  #   security_opt:
  #     - seccomp=unconfined
  #   volumes:
  #     - ${USERDIR}/docker/firefox:/config
  #     - ${DOWNLOAD_DIR}:/config/downloads
  #     - /dev/shm:/dev/shm
  #     - ${USERDIR}/docker/shared:/shared
  #   environment:
  #     USER_ID: ${PUID}
  #     GROUP_ID: ${PGID}
  #     TZ: ${TZ}
  #     UMASK: 022
  #     KEEP_APP_RUNNING: 1
  #     CLEAN_TMP_DIR: 1
  #     DISPLAY_WIDTH: 1600
  #     DISPLAY_HEIGHT: 900
  #   labels:
  #     traefik.enable: true
  #     ## HTTP Routers
  #     traefik.http.routers.firefox-rtr.entrypoints: https
  #     traefik.http.routers.firefox-rtr.rule: Host(`firefox.${DOMAINNAME}`)
  #     traefik.http.routers.firefox-rtr.tls: true
  #     ## Middlewares
  #     traefik.http.routers.firefox-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
  #     ## HTTP Services
  #     traefik.http.routers.firefox-rtr.service: firefox-svc
  #     traefik.http.services.firefox-svc.loadbalancer.server.port: 5800

# Guacamole Daemon
  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - t2_proxy

# Guacamole
  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: ${DB_HOST}
      MYSQL_PORT: ${DB_PORT}
      MYSQL_DATABASE: guacamole
      MYSQL_USER: guacdb_user
      MYSQL_PASSWORD: Willis123!
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.guacamole-rtr.entrypoints: https
      traefik.http.routers.guacamole-rtr.rule: Host(`guac.${DOMAINNAME}`)
      traefik.http.routers.guacamole-rtr.tls: true
      ## Middlewares
      traefik.http.routers.guacamole-rtr.middlewares: chain-oauth@file,add-guacamole
      traefik.http.middlewares.add-guacamole.addPrefix.prefix: /guacamole
      ## HTTP Services
      traefik.http.routers.guacamole-rtr.service: guacamole-svc
      traefik.http.services.guacamole-svc.loadbalancer.server.port: 8080

# Glances - System Information
  glances:
    image: nicolargo/glances
    hostname: glances
    container_name: glances
    restart: unless-stopped
    privileged: true
#    network_mode: host
    networks:
      - t2_proxy
    ports:
      - ${GLANCES_PORT}:${GLANCES_PORT}
    pid: host
    volumes:
      - ${USERDIR}/docker/glances:/glances/conf # Use this if you want to add a glances.conf file
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
#      GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      GLANCES_OPT: "-w"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.glances-rtr.entrypoints: https
      traefik.http.routers.glances-rtr.rule: Host(`glances.${DOMAINNAME}`)
      traefik.http.routers.glances-rtr.tls: true
      ## Middlewares
      traefik.http.routers.glances-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.glances-rtr.service: glances-svc
      traefik.http.services.glances-svc.loadbalancer.server.port: ${GLANCES_PORT}

############################# TESTING 

  # https://www.reddit.com/r/Traefik/comments/j7ili5/wireguard_container_behind_traefik_v2/
  # I think this means you can access wireuard through wireguard://willishomeserver.com?
  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    hostname: wireguard
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 172.22.10.1
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=willishomeserver.com #optional
      - INTERNAL_SUBNET=172.22.10.0/16
      - SERVERPORT=51820 #optional
      - PEERDNS=8.8.8.8
      - PEERS=5 #optional
    volumes:
      - ${USERDIR}/docker/wireguard/config:/config
      - ${USERDIR}/docker/wireguard/modules:/lib/modules
      # - /usr/src:/usr/src
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    labels:
      traefik.enable: true
    ## UDP Routers
      traefik.udp.routers.wireguard-udp.entrypoints: wireguard
    ## UDP Services
      traefik.udp.routers.wireguard-udp.service: wireguard-udp-svc
      traefik.udp.services.wireguard-udp-svc.loadbalancer.server.port: 51820
      

  docassemble:
    image: jhpyle/docassemble
    hostname: docassemble
    container_name: docassemble
    restart: unless-stopped
    env_file:
      - docassenv.list
    networks:
      - default
      - t2_proxy
    ports:
      - 3856:80
      - 3756:443
    volumes:
      - ${USERDIR}/docker/docassemble:/usr/share/docassemble/backup
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.doc-rtr.entrypoints: https
      traefik.http.routers.doc-rtr.rule: Host(`docs.${DOMAINNAME}`)
      traefik.http.routers.doc-rtr.tls: true
      ## Middlewares
      traefik.http.routers.doc-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.doc-rtr.service: doc-svc
      traefik.http.services.doc-svc.loadbalancer.server.port: 80

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 3000:3000
    volumes:
      - ${USERDIR}/docker/grafana/data:/var/lib/grafana
      - ${USERDIR}/docker/grafana/config:/etc/grafana
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.grafana-rtr.entrypoints: https
      traefik.http.routers.grafana-rtr.rule: Host(`grafana.${DOMAINNAME}`)
      traefik.http.routers.grafana-rtr.tls: true
      ## Middlewares
      traefik.http.routers.grafana-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.grafana-rtr.service: grafana-svc
      traefik.http.services.grafana-svc.loadbalancer.server.port: 3000

  # https://devopscube.com/monitor-linux-servers-prometheus-node-exporter/
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 9090:9090
    volumes:
      - ${USERDIR}/docker/prometheus:/etc/prometheus
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.prometheus-rtr.entrypoints: https
      traefik.http.routers.prometheus-rtr.rule: Host(`prometheus.${DOMAINNAME}`)
      traefik.http.routers.prometheus-rtr.tls: true
      ## Middlewares
      traefik.http.routers.prometheus-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.prometheus-rtr.service: prometheus-svc
      traefik.http.services.prometheus-svc.loadbalancer.server.port: 9090

  grocy:
    image: linuxserver/grocy
    container_name: grocy
    hostname: grocy
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 9283:80
    volumes:
      - ${USERDIR}/docker/grocy:/config
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.grocy-rtr.entrypoints: https
      traefik.http.routers.grocy-rtr.rule: Host(`grocy.${DOMAINNAME}`)
      traefik.http.routers.grocy-rtr.tls: true
      ## Middlewares
      # traefik.http.routers.grocy-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.grocy-rtr.service: grocy-svc
      traefik.http.services.grocy-svc.loadbalancer.server.port: 80

  zabbix-proxy:
    image: zabbix/zabbix-proxy-sqlite3:ubuntu-5.0.4
    hostname: zabbix-proxy
    container_name: zabbix-proxy
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 10051:10051
    volumes:
      - ${USERDIR}/docker/zabbix/modules:/var/lib/zabbix/modules
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      ZBX_HOSTNAME: SJW-Ubuntu-VM-Proxy
      ZBX_SERVER_HOST: ubnt.theimagefactory.com.au
      ZBX_SERVER_PORT: 10051
      ZBX_PROXYMODE: 0

  zabbix-agent:
    image: zabbix/zabbix-agent:ubuntu-5.0.4
    hostname: zabbix-agent
    container_name: zabbix-agent
    restart: unless-stopped
    networks:
      - default
      - t2_proxy
    ports:
      - 10050:10050
    volumes:
      - ${USERDIR}/docker/zabbix/modules:/var/lib/zabbix/modules
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      ZBX_HOSTNAME: SJW-Ubuntu-VM-Agent
      ZBX_SERVER_HOST: 10.1.1.141
      # ZBX_PASSIVE_ALLOW: true
      # ZBX_PASSIVESERVERS: localhost:10051
      # ZBX_ACTIVE_ALLOW: true
      # ZBX_ACTIVESERVERS: localhost:10051

############################# MAINTENANCE

# Add, Oznu/Cloudflare-DDNS
# Add, tiredofit/traefik-cloudflare-companion

# Ouroboros - Automatic Docker Container Updates
  ouroboros:
    image: pyouroboros/ouroboros
    container_name: ouroboros
    hostname: ouroboros
    restart: unless-stopped
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ}
      INTERVAL: 86400
      LOG_LEVEL: debug
      SELF_UPDATE: "true"
      CLEANUP: "true"
      IGNORE: traefik influxdb hassio_dns homeassistant hassio_supervisor addon_core_check_config addon_62c7908d_autobackup plexms
